apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: foobar-ratelimit
spec:
  workloadSelector:
    labels:
      app: foobar
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: http_local_rate_limiter
              token_bucket:
                max_tokens: 5
                tokens_per_fill: 5
                fill_interval: 10s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
                - append_action: APPEND_IF_EXISTS_OR_ADD
                  header:
                    key: x-rate-limited
                    value: TOO_MANY_REQUESTS
                - append_action: APPEND_IF_EXISTS_OR_ADD
                  header:
                    key: location
                    value: 'https://istio.com'
              status:
                code: 429
              descriptors:
                - entries:
                  - key: path
                    value: "api"
                  token_bucket:
                    max_tokens: 1
                    tokens_per_fill: 1
                    fill_interval: 10s
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_FIRST
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                request_handle:logWarn("request")
                local path = request_handle:headers():get(":path")
                request_handle:logWarn("path:" .. path )
                if string.find(path, "^/api") then 
                  request_handle:streamInfo():dynamicMetadata():set("path_info", "api", 1)
                else
                  request_handle:streamInfo():dynamicMetadata():set("path_info", "api", 0)
                end
              end

              function envoy_on_response(response_handle)
                response_handle:logWarn("response")
                local isApi = response_handle:streamInfo():dynamicMetadata():get("path_info")["api"]
                response_handle:logWarn("isApi:" .. isApi)
                if isApi == 0 then
                  if response_handle:headers():get(":status") == "429" then
                    response_handle:headers():replace(":status", "302")
                  end
                end
              end
    - applyTo: HTTP_ROUTE
      match:
        context: SIDECAR_INBOUND
        routeConfiguration:
          vhost:
            name: "inbound|http|5000"
      patch:
        operation: MERGE
        value:
          route:
            rate_limits:
              - actions:
                - header_value_match:
                    descriptor_key: "path"
                    descriptor_value: "api"
                    headers:
                      - name: ":path"
                        safe_regex_match:
                          google_re2: {}
                          regex: "/api.*"
